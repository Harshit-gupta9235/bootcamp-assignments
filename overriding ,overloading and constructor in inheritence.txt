1. Create a class FLOAT that contains one float data member. Overload all the four
arithmetic operators so that they can operate on the objects of FLOAT.

ans----

#include<iostream>
using namespace std;
class FLOAT
{
    float k;
    public:
    void setdata(){cin>>k;}
    int showdata(){cout<<k<<endl;}
    FLOAT operator+(FLOAT p){
        FLOAT e;
        e.k=k+p.k;
        return (e);
    }
    FLOAT operator-(FLOAT p){
        FLOAT e;
        e.k=k-p.k;
        return (e);
    }
    FLOAT operator*(FLOAT p){
        FLOAT e;
        e.k=k*p.k;
        return (e);
    }
    FLOAT operator/(FLOAT p){
        FLOAT e;
        e.k=k/p.k;
        return (e);
    }
};
int main()
{
    FLOAT a,b,c;
    cout<<"enter two number\n";
    a.setdata();
    b.setdata();
    c=a+b;
    cout<<"sum of two numbers is : ";
    c.showdata();
    c=a-b;
    cout<<"subtraction of two numbers : ";
    c.showdata();
    c=a*b;
    cout<<"multiplication of two number is : ";
    c.showdata();
    c=a/b;
    cout<<"divison of two numbers is : ";
    c.showdata();
    return(0);
}

2. Define a class Rectangle and overload area function for different types of data type.

ans:

#include<iostream>
using namespace std;
class rectangle
{
    int k1,area1;float k2,area2;double k3,area3;
    void ar(int k){area1=k*k;}
    void ar(float k){area2=k*k;}
    void ar(double k){area3=k*k;}
    public:
    void setdata(int a){k1=a;}
    void setdata(float a){k2=a;}
    void setdata(double a){k3=a;}
    void showdata(int useless=0){ ar(k1);cout<< area1<<endl;}
    void showdata(float useless=0){ar(k2);cout<<area2<<endl;}
    void showdata(double useless=0){ar(k3);cout<<area3<<endl;}
};
int main(){
    rectangle a;
    a.setdata(5);
    a.showdata(0);
    rectangle b;
    b.setdata(6.7);
    b.showdata(6.3);
    rectangle c;
    c.setdata(5.45664);
    c.showdata(5.333333);
    return 0;
}

3. Define a base class Animals having member function sound() . Define another
derived class from Animals class named Dogs. You need to override the sound
function of the base class in the derived class.

ans:

#include<iostream>
using namespace std;
class animals
{
    public:
    void sound(){cout<<"animals class works.\n";}
};
class dogs:public animals
{   public:
    void sound(){cout<<"dog class works\n";}
};
int main()
{
    dogs a;
    a.sound();
    return 0;
}


4. Define a class Addition that can add 2 or 3 numbers of different data types using
function overloading.

ans:

#include<iostream>
using namespace std;
template <class x,class y,class z>
class addition{
    x a;y e;z i;
    public:
    addition(x a,y e, z i=0){this->a=a;this->y=y;this->i=i;}
    z add(){return (a+e+i);}
};
int main(){
    addition<int,float,int> a(3,4.5,5000);int n;
    n=a.add();
    cout<<n<<endl;
    return 0;
}
5. Define a class A having multiple constructors. Define another class B derived from
class A. Create derived class constructors and show use of constructor in this single
inheritance.

ans:

#include<iostream>
using namespace std;
class a{
    public:
    a(){}
    a(int a=0){}
};
class b:public a
{
    public:
    b(int e=0):a(e){}
  
};
int main(){
    b ps;
    return 0;
}
6. C++ Program to illustrate the use of Constructors in multilevel inheritance of your
choice.

ans:

#include<iostream>
using namespace std;
class a{
    public:
    a(){cout<<"i";}
   
};
class b:public a
{
    public:
    b():a(){cout<<" love ";}
  
};
class c:public b
{
    public:
    c():b(){cout<<"my ps ";}
};
int main(){
    c ps;
    return 0;
}
7. C++ Program to illustrate the use of Constructors in single inheritance of your choice.

ans:

#include<iostream>
using namespace std;
class a{
    public:
    a(){}
    a(int a=0){}
};
class b:public a
{
    public:
    b(int e=0):a(e){}
  
};
int main(){
    b ps;
    return 0;
}

8. Write a C++ program to find the factorial of a number using copy constructor.

ans:


9. Write a C++ program to calculate the area of triangle, rectangle and circle using
constructor overloading. The program should be menu driven.

ans:


10. Create a C++ class for player objects with the following attributes: player no., name,
number of matches and number of goals done in each match. The number of
matches varies for each player. Write a parameterized constructor which initializes
player no., name, number of subjects and creates an array for number of goals and
number of matches dynamically