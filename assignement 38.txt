1. List functions in C++ STL (Standard Template Library)

ans:

push_back()
push_front()
pop_back()
pop_front()
size()
sort()
reverse()
clear()
remove()

2. Assign the elements to the list (different methods) - Example of list::assign() | C++
STL

ans:

3. Iterate a list C++ STL

ans:

#include<iostream>
#include<list>
using namespace std;
int main(){
    list<int>li;
    li.push_back(56);
    li.push_front(45);
   list<int>::iterator p=li.begin();
   while (p!=li.end())
   {
   cout<<*p<<endl;
   p++;
   }
   
}
4. Iterate a list in reverse order C++ STL

ans:

#include<iostream>
#include<list>
using namespace std;
int main(){
    list<int>li;
    li.push_back(1);
    li.push_front(2);
    li.push_back(5);
    li.push_back(34);
    li.reverse();
   list<int>::iterator p=li.begin();
   while (p!=li.end())
   {
   cout<<*p<<endl;
   p++;
   }
   
}
5. Input and add elements to a list C++ STL

ans:

#include<iostream>
#include<list>
using namespace std;
int main(){
    list<int>li;
    for (int i = 0; i < 6; i++)
    {
        li.push_front(100*(i+1));
    }
    list<int>::iterator p=li.begin();
    while (p!=li.end())
    {
      cout<<*p<<endl;
      p++;
    }
   return 0; 
}
6. Get the first and last element of the list C++ STL

ans: 

#include<iostream>
#include<list>
using namespace std;
int main(){
    list<int>li;
    for (int i = 0; i < 6; i++)
    {
        li.push_front(100*(i+1));
    }
    cout<<li.front()<<li.back();
    return 0;
    
    
}
7. Insert the element at beginning and end of the list | C++ STL.

ans:

#include<iostream>
#include<list>
using namespace std;
int main(){
    list<int>a;
    a.push_back(100);
    a.push_front(45);
    a.push_back(120);
    a.push_front(23);
    list<int>::iterator b=a.begin();
   while(b!=a.end()){cout<<*b<<endl;b++;}
   return 0;
}

8. Remove all occurrences of an element and remove set of some specific from the list
C++ STL

ans:

#include<iostream>
#include<list>
using namespace std;
int main(){
    list<int>a;
    a.push_back(100);
    a.push_front(45);
    a.push_back(120);
    a.push_front(23);
    a.push_back(100);
    a.push_front(120);
    a.remove(100);
    a.remove(120);
    list<int>::iterator b=a.begin();
   while(b!=a.end()){cout<<*b<<endl;b++;}
   return 0;
}

9. Remove all consecutive duplicate elements from the list | C++ STL

ans:

#include<iostream>
#include<list>
using namespace std;
int main(){
    list<int>a;
    a.push_back(100);
    a.push_front(45);
    a.push_back(120);
    a.push_front(23);
    a.push_back(100);
    a.push_front(120);
    a.remove(100);
    a.remove(120);
    list<int>::iterator b=a.begin();
   while(b!=a.end()){cout<<*b<<endl;b++;}
   return 0;
}
10. Merge two lists C++ STL

ans:

#include<bits/stdc++.h>
#include<list>
using namespace std;
int main(){
    list<int>a{1,2,3,4,5};
   list<int>v{6,7,8,9,10};
   list<int>z(10);
   merge(a.begin(),a.end(),v.begin(),v.end(),z.begin());
    for(int x:z)
    cout<<x<<" ";
   return 0;
}
11. Creating a list by assigning the all elements of another list C++ STL

ans:

#include<bits/stdc++.h>
#include<list>
using namespace std;
int main(){
    list<int>a{1,2,3,4,5};
   list<int>v=a;
   list<int>::iterator b=v.begin();
   while(b!=v.end()){cout<<*b<<"  ";b++;}
   return 0;
}
12. Assign a list with array elements C++ STL

ans:


13. Push characters in a list and print them separated by space in C++ STL

ans:

#include<bits/stdc++.h>
#include<list>
#include<string>
using namespace std;
int main(){
    string a="harshit gupta";
    list<char>b;
  for(int i=0;i<a.size();i++){b.push_back(a[i]);}
   list<char>::iterator r=b.begin();
   while(r!=b.end()){cout<<*r<<"  ";r++;}
   return 0;
}
14. Access elements of a characters list using const_iterator in C++ STL